#include <windows.h>

#define internal static
#define local_persist static
#define global_variable static

// TODO(spike): this is a global for now
global_variable bool Running;
global_variable BITMAPINFO BitmapInfo;
global_variable void *BitmapMemory;
global_variable HBITMAP BitmapHandle;

internal void
Win32ResizeDIBSection(int Width, int Height)
{
	BitmapInfo.bmiHeader.biSize = sizeof(BitmapInfo.bmiHeader);
	BitmapInfo.bmiHeader.biWidth = Width;
    BitmapInfo.bmiHeader.biHeight = Height;
    BitmapInfo.bmiHeader.biPlanes = 1;
    BitmapInfo.bmiHeader.biBitCount = 32;
    BitmapInfo.bmiHeader.biCompression = BI_RGB;
    BitmapInfo.bmiHeader.biSizeImage = 0;
    BitmapInfo.bmiHeader.biXPelsPerMeter = 0;
    BitmapInfo.bmiHeader.biYPelsPerMeter = 0;
    BitmapInfo.bmiHeader.biClrUsed = 0;
    BitmapInfo.bmiHeader.biClrImportant = 0;

	void *BitmapMemory;
    BitmapHandle = CreateDIBSection(
		DeviceContext, &BitmapInfo
		DIB_RGB_COLOURS,
        &BitmapMemory,
        0, 0);

    HBITMAP BitmapHandle = CreateDIBSection(
        DeviceContext, &BitmapInfo,
        DIB_RGB_COLORS,
        &BitmapMemory,
        0, 0);
}

internal void
Win32UpdateWindow(HDC DeviceContext, int X, int Y, int Width, int Height);
{
	StretchDIBits(DeviceContext,
            	  X, Y, Width, Height,
                  X, Y, Width, Height,
                  ,
                  DIB_RGB_COLORS, SRCCOPY);
}

LRESULT CALLBACK
Win32MainWindowCallback(HWND Window,
        		   UINT Message,
                   WPARAM WParam,
                   LPARAM LParam)
{
	LRESULT Result = 0;

    switch(Message)
    {
        case WM_SIZE:
        {    
            RECT ClientRect;
			BOOL GetClientRect(Window, &ClientRect);
            int Width = ClientRect.right - ClientRect.left;
            int Height = ClientRect.bottom - ClientRect.top;
            Win32ResizeDIBSection(Width, Height);
			OutputDebugStringA("size\n");
        } break;

        case WM_DESTROY:
        {    
            // TODO(spike): handle as error?
            Running = false;
        } break;

        case WM_CLOSE:
        {    
            // TODO(spike): handle this with message to the user?
            Running = false;
        } break;

        case WM_ACTIVATEAPP:
        {    
			OutputDebugStringA("activate\n");
        } break;
		
		case WM_PAINT:
        {    
            PAINTSTRUCT Paint;
            HDC DeviceContext = BeginPaint(Window, &Paint);
			int X = Paint.rcPaint.left;
			int Y = Paint.rcPaint.top;
            int Width = Paint.rcPaint.right - Paint.rcPaint.left;
            int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;
            Win32UpdateWindow(DeviceContext, X, Y, Width, Height);
        	EndPaint(Window, &Paint);
        } break;

        default:
        {
//			OutputDebugStringA("default\n");
            Result = DefWindowProc(Window, Message, WParam, LParam);
        } break;
    }

    return(Result);
}

int CALLBACK
WinMain(HINSTANCE Instance,
        HINSTANCE PrevInstance, 
        LPSTR CommandLine,
        int ShowCode)
{
	WNDCLASS WindowClass = {};

//	WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
	WindowClass.lpfnWndProc = Win32MainWindowCallback;
	WindowClass.hInstance = Instance;
//	WindowClass.Icon;
	WindowClass.lpszClassName = "HandmadeHeroWindowClass";

    if(RegisterClass(&WindowClass))
    {
		HWND WindowHandle = 
            (CreateWindowEx(
                0,
                WindowClass.lpszClassName, 
                "HandmadeHero", 
            	WS_OVERLAPPEDWINDOW|WS_VISIBLE,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                0,
                0,
                Instance,
                0));
		if(WindowHandle)
        {
            Running = true;
			while(Running)
            {
                MSG Message;
                BOOL MessageResult = GetMessageA(&Message, 0, 0, 0);
                if(MessageResult > 0)
                {
            		TranslateMessage(&Message);
                    DispatchMessageA(&Message);
                }
                else
                {
                    break;
                }
            }

        }
		else
        {
            // TODO(spike): logging
        }

    }
    else
    {
        // TODO(spike): logging
    }

	return(0);
}
