#include <windows.h>

LRESULT CALLBACK
MainWindowCallback(HWND Window,
        		   UINT Message,
                   WPARAM WParam,
                   LPARAM LParam)
{
	LRESULT Result = 0;

    switch(Message)
    {
        case WM_SIZE:
        {    
			OutputDebugStringA("size\n");
        } break;

        case WM_DESTROY:
        {    
			OutputDebugStringA("destroy\n");
        } break;

        case WM_CLOSE:
        {    
			OutputDebugStringA("close\n");
        } break;

        case WM_ACTIVATEAPP:
        {    
			OutputDebugStringA("activate\n");
        } break;

        default:
        {
//			OutputDebugStringA("default\n");
            Result = DefWindowProc(Window, Message, WParam, LParam);
        } break;
    }

    return(Result);
}

int CALLBACK
WinMain(HINSTANCE Instance,
        HINSTANCE PrevInstance, 
        LPSTR CommandLine,
        int ShowCode)
{
	WNDCLASS WindowClass = {};

//	WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
	WindowClass.lpfnWndProc = MainWindowCallback;
	WindowClass.hInstance = Instance;
//	WindowClass.Icon;
	WindowClass.lpszClassName = "HandmadeHeroWindowClass";

    if(RegisterClass(&WindowClass))
    {
		HWND WindowHandle = 
            (CreateWindowEx(
                0,
                WindowClass.lpszClassName, 
                "HandmadeHero", 
            	WS_OVERLAPPEDWINDOW|WS_VISIBLE,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                CW_USEDEFAULT,
                0,
                0,
                Instance,
                0));
		if(WindowHandle)
        {
            MSG Message;
			
			for(;;)
            {
                BOOL MessageResult = GetMessage(&Message, 0, 0, 0);
                if(MessageResult > 0)
                {
            		TranslateMessage(&Message);
                    DispatchMessage(&Message);
                }
                else
                {
                    break;
                }
            }

        }
		else
        {
            // TODO(spike): logging
        }

    }
    else
    {
        // TODO(spike): logging
    }

	return(0);
}
